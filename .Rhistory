library(ISLR2)
attach(Auto)
names(Auto)
auto = Auto[,-9]
names(auto)
medmpg = median(mpg)
mpg01 = factor(ifelse(mpg < medmpg , 0 , 1 ))
auto = cbind(mpg01, auto[,-1])
names(auto)
plot(auto)
summary(auto)
cor(auto)
library(dplyr)
corrplot::corrplot.mixed(cor(Auto[, -9]), upper="circle")
par(mfrow=c(2,3))
boxplot(cylinders ~ mpg01, data = auto, main = "Cylinders vs mpg01")
boxplot(displacement ~ mpg01, data = auto, main = "Displacement vs mpg01")
boxplot(horsepower ~ mpg01, data = auto, main = "Horsepower vs mpg01")
boxplot(weight ~ mpg01, data = auto, main = "Weight vs mpg01")
boxplot(acceleration ~ mpg01, data = auto, main = "Acceleration vs mpg01")
boxplot(year ~ mpg01, data = auto, main = "Year vs mpg01")
library(corrplot)
dim(auto)
train = (Year < 2009)
train = auto[ndim , ]
train = auto[n_dim , ]
n_dim = 314
train = auto[n_dim , ]
train
train = auto[0 , n_dim]
train
train = auto[1 , n_dim]
train
n_dim = 314
indices <- 1:nrow(auto)
train_indices <- indices[1:n_train]
train_indices <- indices[1:n_dim]
test_indices <- indices[-train_indices]
train_data <- auto[train_indices, ]
test_data <- auto[test_indices, ]
glm.fit.train <- glm(Direction ~ Lag2 , data = Weekly, family = binomial, subset = train_data)
glm.fit.train <- glm(mpg01 ~ cylinders + weight + displacement + horsepower , data = auto, family = binomial)
glm.prob.test = predict(glm.fit.train, test, type = "response")
glm.prob.test = predict(glm.fit.train, test_data, type = "response")
glm.prob.test = predict(glm.fit.train, test_data, type = "response")
glm.pred.test = rep(0, 314)
glm.pred.test [glm.prob.test > .5 ] = 1
table(glm.pred.test , test.target)
test.target = mpg01[test_indices]
glm.fit.train <- glm(mpg01 ~ cylinders + weight + displacement + horsepower , data = auto, family = binomial)
glm.prob.test = predict(glm.fit.train, test_data, type = "response")
glm.pred.test = rep(0, 314)
glm.pred.test [glm.prob.test > .5 ] = 1
table(glm.pred.test , test.target)
test.target = mpg01[test_data]
glm.fit = glm(mpg01 ~ cylinders + displacement + horsepower + weight + acceleration + year + origin , data = auto , family = binomial)
summary(glm.fit)
############################ Ex 4.1
#1
View(Default)
?Default
attach(Default)
#2
summary(Default)
dim(Default)
#3
glm.fit<-glm(default ~ balance, family = binomial)
#4
summary(glm.fit)
############################ Ex 4.2
glm.fit$coefficients
#1
exp(-10.651330614 + 0.005498917*1000)/(1+ exp(-10.651330614 + 0.005498917*1000))
#2
exp(-10.651330614 + 0.005498917*2000)/(1+ exp(-10.651330614 + 0.005498917*2000))
#or
predict(glm.fit, newdata = data.frame(balance = c(1000 , 2000)) , type = "response")
preditct(glm.fit, newdata = data.frame(balance = 1000, income = 30000, student = "Yes"))
predict(glm.fit, newdata = data.frame(balance = 1000, income = 30000, student = "Yes"))
predict(glm.fit, newdata = data.frame(balance = 1000, income = 30000, student = "Yes")), type = "response"
predict(glm.fit, newdata = data.frame(balance = 1000, income = 30000, student = "Yes"), type = "response")
#or
predict(glm.fit, newdata = data.frame(balance = c(1000 , 2000)) , type = "response")
preditct()
############################ Ex 4.3
#1
View(Default)
attach(Default)
glm.fit<-glm(default ~ balance + income + factor(student) , family = binomial)
#2
summary(glm.fit)
contrasts(student)#To check the values for the student variable
#3
predict(glm.fit, newdata = data.frame(balance = 1500, income = 40000, student = "Yes")
, type = "response")
predict(glm.fit, newdata = data.frame(balance = 1000, income = 30000, student = "Yes"), type = "response")
lm.fit <- lm(Weight ~ Length1 , Species)
setwd("/Users/laneaffield/Stat108Codes/PROJECT 01")
##NAME:
##PROF:
#DATE:
#TITLE: PROJECT 01
#DATASET: FISH MARKET
#DATASET LINK:
getwd()
Fish <- read.csv("Fish.csv") #Load Amazon Dataset
attach(Fish) #attach it
#EXPLORING DATASET
dim(Fish)
head(Fish)
View(Fish)
plot(Fish, col = "blue")
summary(Fish)
library(corrplot)
Species
#dummies <- model.matrix(~ Species, data = Fish) #creates dummies for species
#fish <- cbind(Fish, dummies) #adds to dataset
#fish <- fish[,-1] #removes the original species column from dataset
#fish
correlations<-cor(Fish[-1])#cor matrix
correlations
corrplot(correlations, "circle") #correlation plot
#LM
lm.fit <- lm(Weight~Length1)
summary(lm.fit)
par(mfrow = c(2,2)) #divides plotting region
plot(lm.fit)
plot(Weight~Length1)
abline(lm.fit, col = "green")
abline(lm.fit)
lm.fit <- lm(Weight ~ Length1 , Species)
lm.fit <- lm(Weight ~ Length1 + Species)
plot(lm.fit)
summary(lm.fit)
par(mfrow = c(2,2)) #divides plotting region
plot(lm.fit)
plot(lm.fit)
plot(lm.fit)
plot(lm.fit)
plot(lm.fit)
lm.fit <- lm(Weight ~ Length1 + Species)
summary(lm.fit)
par(mfrow = c(2,2)) #divides plotting region
plot(lm.fit)
fish2 <- Fish
fish01 <- Fish
Weight01 <- ifelse(Weight > median(Weight), yes=1, no =0)
lr.fit.train<-glm(Weight01 ~ Length1 + Species , Data = Fish, family = binomial)
lr.fit.train<-glm(Weight01 ~ Length1 + Species)
lr.fit<-glm(Weight01 ~ Length1 + Species)
plot()
plot(lr.fit)
#LM
lm.fit <- lm(Weight~Length1)
#LM
lm.fit1 <- lm(Weight~Length1)
summary(lm.fit)
par(mfrow = c(2,2)) #divides plotting region
confint(lm.fit1)
lm.fit2 <- lm(Weight ~ Length1 + Species)
confint(lm.fit2)
confint(lr.fit)
lr.fit.train<-glm(Weight01 ~ Length1, Species, family = binomial, subset = train)
lr.fit.train<-glm(Weight01 ~ Length1 + Species, family = binomial, subset = train)
summary(lr.fit.train)
lr.prob.test <- predict(lr.fit.train, test, type="response")
#EXPLORING DATASET
dim(Fish)
Fish.new<-data.frame(Weight01, Auto)
Weight01 <- ifelse(Weight > median(Weight), yes=1, no =0)#change to binary values
Fish.new<-data.frame(Weight01, Fish)
lr.fit<-glm(Weight01 ~ Length1 + Species)
plot(lr.fit)
confint(lr.fit)#get confints
train<-1:112
test<-[112:159]
test<-Fish.new[112:159]
#EXPLORING DATASET
dim(Fish)
test<-Fish.new[112:159]
test<-Fish.new[113:159]
lr.fit.train<-glm(Weight01 ~ Length1 + Species, family = binomial, subset = train)
summary(lr.fit.train)
lr.prob.test <- predict(lr.fit.train, test, type="response")
lr.pred.test <- rep(0, 78)
lr.pred.test [lr.prob.test > .5] <- 1
table(lr.pred.test, test.target)
mean(lr.pred.test == test.target)
lr.fit.train<-glm(Weight01 ~ Length1 + Species, data = Fish.new, family = binomial, subset = train)
test<-Fish.new[113:159,]
lr.fit.train<-glm(Weight01 ~ Length1 + Species, data = Fish.new, family = binomial, subset = train)
summary(lr.fit.train)
lr.prob.test <- predict(lr.fit.train, test, type="response")
lr.pred.test <- rep(0, 78)
lr.pred.test [lr.prob.test > .5] <- 1
lr.prob.test <- predict(lr.fit.train, test, type="response")
plot(predict(lm.fit1), residuals(lm.fit1))
predict(lm.fit1)
lr.fit.train<-glm(Weight01 ~ Length1 + as.numeric(Species), data = Fish.new, family = binomial, subset = train)
dummies <- model.matrix(~ Species, data = Fish) #creates dummies for species
fish <- cbind(Fish, dummies) #adds to dataset
fish <- fish[,-1] #removes the original species column from dataset
fish
Fish.new<-data.frame(Weight01, fish)
train<-1:112
test<-Fish.new[113:159,]
lr.fit.train<-glm(Weight01 ~ Length1 + SpeciesParkki + SpeciesPerch + SpeciesRoach + SpeciesSmelt +SpeciesWhitefish, data = Fish.new, family = binomial, subset = train)
summary(lr.fit.train)
lr.prob.test <- predict(lr.fit.train, test, type="response")
lr.pred.test <- rep(0, 78)
lr.pred.test [lr.prob.test > .5] <- 1
table(lr.pred.test, test.target)
mean(lr.pred.test == test.target)
lr.pred.test <- rep(0, 47)
lr.pred.test [lr.prob.test > .5] <- 1
table(lr.pred.test, test.target)
mean(lr.pred.test == test.target)
lr.pred.test <- rep(0, 46)
lr.pred.test [lr.prob.test > .5] <- 1
table(lr.pred.test, test.target)
lr.pred.test <- rep(0, 48)
lr.pred.test [lr.prob.test > .5] <- 1
table(lr.pred.test, test.target)
lr.pred.test <- rep(0, 78)
lr.pred.test [lr.prob.test > .5] <- 1
table(lr.pred.test, test.target)
mean(lr.pred.test == test.target)
lm.train<-lm(Weight01 ~ Length1 + SpeciesParkki + SpeciesPerch + SpeciesRoach + SpeciesSmelt +SpeciesWhitefish, data = fish, subset = train)
summary(lm.fit)
lr.prob.test <- predict(lr.fit.train, test, type="response")
lr.pred.test <- rep(0, 78)
lr.pred.test [lr.prob.test > .5] <- 1
table(lr.pred.test, test.target)
mean(lr.pred.test == test.target)
lm.train<-lm(Weight01 ~ Length1 + SpeciesParkki + SpeciesPerch + SpeciesRoach + SpeciesSmelt +SpeciesWhitefish, data = fish, subset = train)
summary(lm.fit)
lr.prob.test <- predict(lm.train, test, type="response")
lr.pred.test <- rep(0, 78)
lr.pred.test [lr.prob.test > .5] <- 1
table(lr.pred.test, test.target)
mean(lr.pred.test == test.target)
train<-1:112
test<-fish[113:159,]
lm.train<-lm(Weight01 ~ Length1 + SpeciesParkki + SpeciesPerch + SpeciesRoach + SpeciesSmelt +SpeciesWhitefish, data = fish, subset = train)
summary(lm.fit)
summary(lm.train)
lr.prob.test <- predict(lm.train, test, type="response")
lr.pred.test <- rep(0, 78)
lr.pred.test [lr.prob.test > .5] <- 1
table(lr.pred.test, test.target)
mean(lr.pred.test == test.target)
abline(lm.fit)
summary(lm.fit1)
summary(lm.fit1)
#LM
lm.fit1 <- lm(Weight~Length1)
summary(lm.fit1)
par(mfrow = c(2,2)) #divides plotting region
plot(lm.fit1)
plot(predict(lm.fit1), residuals(lm.fit1))
summary(lm.fit2)
Summary(lr.fit)
lr.fit<-glm(Weight01 ~ Length1 + Species)
Summary(lr.fit)
Weight01 <- ifelse(Weight > median(Weight), yes=1, no =0)#change to binary values
Fish.new<-data.frame(Weight01, fish)
lr.fit<-glm(Weight01 ~ Length1 + Species)
Summary(lr.fit)
summary(lr.fit)
summary(lm.fit1)
summary(lm.fit2)
summary(lr.fit)
